image: docker:20.10  # To run all jobs in this pipeline, use a latest docker image

services:
  - docker:dind       # To run all jobs in this pipeline, use a docker image which contains a docker daemon running inside (dind - docker in docker). Reference: https://forum.gitlab.com/t/why-services-docker-dind-is-needed-while-already-having-image-docker/43534

stages:
  - build
  - test
  - release
  - preprod
  - integration
  - prod

build:
  stage: build
  image: python:3.6
  before_script:
   - pip3 install --upgrade virtualenv
  script:
   - virtualenv env                       # Create a virtual environment for the python application
   - source env/bin/activate              # Activate the virtual environment
   - pip install -r requirements.txt      # Install the required third party packages as defined in requirements.txt
   - python manage.py check               # Run checks to ensure the application is working fine

test:
  stage: test
  image: python:3.6
  before_script:
   - pip3 install --upgrade virtualenv
  script:
   - virtualenv env
   - source env/bin/activate
   - pip install -r requirements.txt
   - python manage.py test taskManager

katanaAndNuclei:
  stage: integration
  image: python:3.6
  before_script:
    - wget https://github.com/projectdiscovery/katana/releases/download/v1.0.3/katana_1.0.3_linux_amd64.zip
    - unzip -o katana_1.0.3_linux_amd64.zip
    - mv katana /usr/bin/
    - wget https://github.com/projectdiscovery/nuclei/releases/download/v2.9.6/nuclei_2.9.6_linux_amd64.zip
    - unzip -o nuclei_2.9.6_linux_amd64.zip
    - mv nuclei /usr/local/bin/nuclei
  script: 
    - katana -u https://public-firing-range.appspot.com/ -f qurl -o endpoints.txt
    - sed -i '/^$/d' endpoints.txt
    - git clone https://github.com/projectdiscovery/fuzzing-templates.git
    - nuclei -list endpoints.txt -t fuzzing-templates -j -o nuclei-output.json
  artifacts:
    paths: [nuclei-output.json]
    when: always # What does this do?
    expire_in: one week
  allow_failure: true
