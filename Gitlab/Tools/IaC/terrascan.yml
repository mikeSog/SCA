image: docker:20.10  # To run all jobs in this pipeline, use a latest docker image

services:
  - docker:dind       # To run all jobs in this pipeline, use a docker image which contains a docker daemon running inside (dind - docker in docker). Reference: https://forum.gitlab.com/t/why-services-docker-dind-is-needed-while-already-having-image-docker/43534

stages:
  - validate
  - build
  - test
  - release
  - preprod
  - integration
  - prod

terrascan:
  stage: validate
  image:
    name: accurics/terrascan:latest
    entrypoint: ["/bin/sh", "-c"]
  script:
    - /go/bin/terrascan scan . -o json > terrascan-output.json
  artifacts:
    paths: [terrascan-output.json]
    when: always
  allow_failure: true

terrascan2: 
  stage: validate
  image: python:3.6
  before_script:
    - pip install terrascan
  script:
    - terrascan scan -d gcp -o json | tee terrascan-report2.json
  artifacts:
    paths: [terrascan-report2.json]
    expire_in: one week
    when: always

terrascan3: 
  stage: validate
  image: python:3.6
  before_script:
    - wget https://github.com/accurics/terrascan/releases/download/v1.12.0/terrascan_1.12.0_Linux_x86_64.tar.gz
    - tar -xvf terrascan_1.12.0_Linux_x86_64.tar.gz
    - chmod +x terrascan
  script:
    - terrascan scan -d gcp -o json | tee terrascan-report3.json
  artifacts:
    paths: [terrascan-report3.json]
    expire_in: one week
    when: always

test:
  stage: test
  script:
    - echo "This is a test step"

integration:
  stage: integration
  script:
    - echo "This is an integration step"
    - exit 1
  allow_failure: true # Even if the job fails, continue to the next stages

prod:
  stage: prod
  script:
    - echo "This is a deploy step."
  when: manual # Continuous Delivery