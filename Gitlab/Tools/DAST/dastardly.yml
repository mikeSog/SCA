image: docker:20.10  # To run all jobs in this pipeline, use a latest docker image

services:
  - docker:dind       # To run all jobs in this pipeline, use a docker image which contains a docker daemon running inside (dind - docker in docker). Reference: https://forum.gitlab.com/t/why-services-docker-dind-is-needed-while-already-having-image-docker/43534

stages:
  - build
  - test
  - release
  - preprod
  - integration
  - prod

build:
  stage: build
  image: python:3.6
  before_script:
   - pip3 install --upgrade virtualenv
  script:
   - virtualenv env                       # Create a virtual environment for the python application
   - source env/bin/activate              # Activate the virtual environment
   - pip install -r requirements.txt      # Install the required third party packages as defined in requirements.txt
   - python manage.py check               # Run checks to ensure the application is working fine

test:
  stage: test
  image: python:3.6
  before_script:
   - pip3 install --upgrade virtualenv
  script:
   - virtualenv env
   - source env/bin/activate
   - pip install -r requirements.txt
   - python manage.py test taskManager

dastardly:
  stage: integration
  script:
    - docker pull public.ecr.aws/portswigger/dastardly
    - docker run --user $(id -u) --rm -v $(pwd):/dastardly:rw -e BURP_START_URL=https://casp-pm-9gws0jmr.lab.practical-devsecops.training/apispec_1.json -e BURP_REPORT_FILE_PATH=/dastardly/dastardly-output.xml public.ecr.aws/portswigger/dastardly
  after_script:
    - docker rmi public.ecr.aws/portswigger/dastardly  # clean up the image to save the disk space
  artifacts:
    paths: [dastardly-output.xml]
    when: always # What does this do?
  allow_failure: true